name: Space API CI/CD

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      SERVER_USER: "root"
      SERVER_HOST: "31.40.4.92"
      SERVER_PORT: "2233"
      SERVER_DIR: "/var/www/space/api"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p $SERVER_PORT -H $SERVER_HOST >> ~/.ssh/known_hosts

      - name: Clean and Clone Repository
        run: |
          ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
            rm -rf $SERVER_DIR
            mkdir -p $SERVER_DIR
            cd $SERVER_DIR
            git clone https://github.com/isatispooya/space-api.git . || { echo 'Git clone failed'; exit 1; }
          "

      - name: Setup Environment Variables
        run: |
          ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
            cd $SERVER_DIR
            echo DEBUG=False > .env
            echo ALLOWED_HOSTS=localhost,127.0.0.1,31.40.4.92,spaceapi.isatispooya.com,* >> .env
            echo DB_NAME='${{ secrets.DB_NAME }}' >> .env
            echo DB_USER='${{ secrets.DB_USER }}' >> .env
            echo DB_PASSWORD='${{ secrets.DB_PASSWORD }}' >> .env
            echo DB_HOST=localhost >> .env
            echo DB_PORT=5432 >> .env
          "

      - name: Install Dependencies
        run: |
          ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
            cd $SERVER_DIR
            apt-get update && apt-get install -y python3-pip
            python3 -m pip install --upgrade pip
            python3 -m pip install python-dotenv
            python3 -m pip install -r requirements.txt --root-user-action=ignore
          "

      - name: Setup Database
        run: |
          ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
            cd $SERVER_DIR
            
            # پشتیبان‌گیری از دیتابیس
            echo 'Creating database backup...'
            pg_dump -U ${{ secrets.DB_USER }} ${{ secrets.DB_NAME }} > backup_$(date +%Y%m%d_%H%M%S).sql || echo 'Backup failed but continuing...'
            
            # حذف تمام مایگریشن‌های قبلی
            find . -path '*/migrations/*.py' -not -name '__init__.py' -delete
            find . -path '*/migrations/*.pyc' -delete
            
            # ایجاد مایگریشن‌ها به ترتیب مشخص شده
            echo 'Creating migrations in specific order...'
            
            # 1. user
            echo 'Making migrations for user...'
            python3 manage.py makemigrations user --verbosity 3 || exit 1
            python3 manage.py migrate user --verbosity 3 || exit 1
            
            # 2. companies
            echo 'Making migrations for companies...'
            python3 manage.py makemigrations companies --verbosity 3 || exit 1
            python3 manage.py migrate companies --verbosity 3 || exit 1
            
            # 3. positions
            echo 'Making migrations for positions...'
            python3 manage.py makemigrations positions --verbosity 3 || exit 1
            python3 manage.py migrate positions --verbosity 3 || exit 1
            
            # 4. payment_gateway
            echo 'Making migrations for payment_gateway...'
            python3 manage.py makemigrations payment_gateway --verbosity 3 || exit 1
            python3 manage.py migrate payment_gateway --verbosity 3 || exit 1
            
            # 5. transactions
            echo 'Making migrations for transactions...'
            python3 manage.py makemigrations transactions --verbosity 3 || exit 1
            python3 manage.py migrate transactions --verbosity 3 || exit 1
            
            # 6. stock_affairs
            echo 'Making migrations for stock_affairs...'
            python3 manage.py makemigrations stock_affairs --verbosity 3 || exit 1
            python3 manage.py migrate stock_affairs --verbosity 3 || exit 1
            
            # 7. core
            echo 'Making migrations for core...'
            python3 manage.py makemigrations core --verbosity 3 || exit 1
            python3 manage.py migrate core --verbosity 3 || exit 1
            
            # بقیه اپ‌ها
            for app in correspondence timeflow; do
              echo \"Making migrations for $app...\"
              python3 manage.py makemigrations $app --verbosity 3 || exit 1
              python3 manage.py migrate $app --verbosity 3 || exit 1
            done
            
            # تأیید نهایی
            echo 'Final migration state:'
            python3 manage.py showmigrations
            
            # بررسی جداول
            echo 'Verifying database tables...'
            python3 manage.py shell -c "from django.db import connection; with connection.cursor() as cursor: cursor.execute(\"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'\"); tables = cursor.fetchall(); print('Available tables:'); [print(table[0]) for table in tables]"
          "

      - name: Setup Static Files
        run: |
          ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
            cd $SERVER_DIR
            mkdir -p static media static_files
            python3 manage.py collectstatic --noinput
          "

      - name: Set Permissions
        run: |
          ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
            mkdir -p /var/log/gunicorn
            chown -R www-data:www-data /var/log/gunicorn
            chown -R www-data:www-data $SERVER_DIR
            chmod -R 755 $SERVER_DIR
          "

      - name: Restart Service
        run: |
          ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
            systemctl daemon-reload
            sleep 5
            systemctl restart space-api
            sleep 5
            systemctl status space-api --no-pager
          "

      - name: Verify Deployment
        run: |
          ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
            echo 'Checking service status...'
            systemctl is-active space-api || { echo 'Service failed to start'; exit 1; }
            echo 'Deployment completed successfully!'
          "
